"""
    –î–ª—è —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from tgbot.keyboards.callback_data import for_key_arrow_controls, for_key_binary_key, for_key_back
from tgbot.misc.other.get_mark import get_mark


async def def_key_testing(
    history: bool = False,
    first: bool = True,
    second: bool = True,
    searching: bool = True,
    send_text: bool = True,
    addition_information: str = "–ø—É—Å—Ç–æ",
    count_searching: int = 5
):
    """
        –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """

    key_testing = InlineKeyboardMarkup(
        inline_keyboard=[
            # [
            #     InlineKeyboardButton(
            #         text='–ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é ' + get_mark(history),
            #         callback_data=for_key_binary_key.new(code="history", key=True)           # –ø–æ—Ç–æ–º
            #     ), # type: ignore
            # ],
            [
                InlineKeyboardButton(
                    text='–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç ' + get_mark(first),
                    callback_data=for_key_binary_key.new(code="first", key=first)
                ), # type: ignore
            ],
            [
                InlineKeyboardButton(
                    text='–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç ' + get_mark(second),
                    callback_data=for_key_binary_key.new(code="second", key=second)
                ), # type: ignore
            ],
            [
                InlineKeyboardButton(
                    text='–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ–∏—Å–∫ ' + get_mark(searching),
                    callback_data=for_key_binary_key.new(code="searching", key=searching)
                ), # type: ignore
            ],
            # [
            #     InlineKeyboardButton(
            #         text='–ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã–π —Ç–µ–∫—Å—Ç ' + get_mark(send_text),
            #         callback_data=for_key_binary_key.new(code="send_text", key=True)             # –ø–æ—Ç–æ–º
            #     ), # type: ignore
            # ],
            # [
            #     InlineKeyboardButton(
            #         text=f'–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è GPT ({addition_information})',
            #         callback_data=for_key_binary_key.new(code="addition_information", key=True)           # –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –≤ –ê–ª—å—Ñ–∞ –≤–µ—Ä—Å–∏–∏ —ç—Ç–æ–≥–æ –Ω–µ –±—É–¥–µ—Ç
            #     ), # type: ignore
            # ],
            # [
            #     InlineKeyboardButton(
            #         text=f'–ö–æ–ª-–≤–æ –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–∏ - {count_searching}',
            #         callback_data=for_key_arrow_controls.new(direction="up")
            #     ), # type: ignore
            # ],
            # [
            #     InlineKeyboardButton(
            #         text='üîΩ',
            #         callback_data=for_key_arrow_controls.new(direction="down")                            # –ø–æ—Ç–æ–º
            #     ), # type: ignore
            #     InlineKeyboardButton(
            #         text=f'{count_searching} / 15',
            #         callback_data=for_key_arrow_controls.new(direction="up")                            # –ø–æ—Ç–æ–º
            #     ), # type: ignore
            #     InlineKeyboardButton(
            #         text='üîº',
            #         callback_data=for_key_arrow_controls.new(direction="up")
            #     ), # type: ignore
            # ]
        ]
    )
    return key_testing
