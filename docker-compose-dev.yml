version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: ${DB_CONTAINER_NAME}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "${DB_NAME}", "-U", "${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - services-network

  mongo:
    image: mongo:7
    container_name: ${MONGO_DB_CONTAINER_NAME}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME}
    ports:
      - "${MONGO_DB_PORT}:27017"
    networks:
      - services-network

  redis:
    image: redis:7
    container_name: ${REDIS_CONTAINER_NAME}
    command: --port ${REDIS_PORT}
    expose:
      - ${REDIS_PORT}
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - services-network
  
  celery:
    build:
      context: .
    env_file:
      - .env
    container_name: celery_app
    command: celery -A celery_module worker -B --loglevel=info
    networks:
      - services-network
    depends_on:
      - redis
  
  admin:
    build:
      context: .
    env_file:
      - .env
    container_name: admin_app
    command: python admin_module.py
    networks:
      - services-network
    depends_on:
      - postgres
      - mongo
    ports:
      - "${ADMIN_MONGO_PORT}:${ADMIN_MONGO_PORT}"
      - "${ADMIN_POSTGRES_PORT}:${ADMIN_POSTGRES_PORT}"


networks:
  services-network:
    driver: bridge
